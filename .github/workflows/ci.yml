name: CI + CD demo pipeline

# Define when the workflow should run. On a push to main, a PR to main or manually with workflow_dispatch

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run.'
        required: true
        default: 'ConfirmDeployment'
        
# Define some jobs that should run

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Compile on Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run build
    
      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with: 
          name: webpack artifacts
          path: public/

  Test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [Build]
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECRET_URL }}    
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@main
        with: 
          name: webpack artifacts
          path: public/
      
      - name: Test on Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test -- --coverage
      - name: Slack Notification Fail
        uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          channel: '#git-cicd'
          message: ${{ job.status }}
        if: always()
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2


  DeployDev:
    name: Deploy to Dev
    if: github.event_name == 'pull_request'
    needs: [Test]
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: 'http://dev.myapp.com'
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECRET_URL }}
    steps:
      - name: Deploy
        run: echo Your code is being deployed to dev.myapp.com!
      
      - name: Slack Notification Success
        uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          channel: '#git-cicd'
          message: DeployDev complete, please review the PR.
        if: ${{ job.status == 'success' }}
       
      - name: Slack Notification Fail
        uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          channel: '#git-cicd'
          message: DeployDev failed, please review the logs and update the PR accordingly
        if: ${{ job.status == 'fail' }}
        
# Our deployment to Staging environment job
  DeployStaging:
    name: Deploy to DeployStaging
    if: github.event.ref == 'refs/heads/main'
    needs: [ Build ]
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECRET_URL }}
    environment:
      name: Staging
      url: 'http://test.myapp.com'
    steps:
      - name: Deploy
        run: echo Your code is being deployed to staging at http://test.myapp.com
      
      - name: Slack Notification
        uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          channel: '#git-cicd'
          message: DeployStaging complete, test your functionality and confirm deployment to Production
        if: always()

# Our confirmation for deployment to production job
  ConfirmDeployment:
    name: Confirm Deployment
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.job == 'ConfirmDeployment'}}
    steps: 
      - name: Confirm Deployment to Production
        run: echo ${{ github.event.inputs.job == 'ConfirmDeployment'}}
        
        
# Our deployment to production job
  DeployProduction:
    name: Deploy to production
    needs: [ConfirmDeployment]
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: 'http://www.myapp.com'
    steps: 
      - name: Deploy
        run: echo The app is live at http://www.myapp.com
